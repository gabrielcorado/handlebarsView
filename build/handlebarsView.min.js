(function() {
  var View;

  if (!(CryptoJS.MD5 || jQuery || Handlebars)) {
    throw 'check the list of dependence';
  }

  View = (function() {
    View.ENV = Handlebars.create();

    function View(name, template, options, handlebars) {
      this.name = name;
      this.options = options != null ? options : {};
      this.handlebars = handlebars != null ? handlebars : View.ENV;
      this.source = $("[data-template-name=\"" + template + "\"]").text();
      this.location = $("[data-render-template=\"" + this.name + "\"]");
      this.template = this.handlebars.compile(this.source);
    }

    View.prototype._dataKey = function(data) {
      return CryptoJS.MD5(JSON.stringify(data)).toString();
    };

    View.prototype._getItems = function() {
      return this.location.find('[data-view-position]').toArray().sort(function(a, b) {
        var aPosition, bPosition, _ref;
        aPosition = Number($(a).attr('data-view-position'));
        bPosition = Number($(b).attr('data-view-position'));
        if ((!a || !b) || (aPosition === bPosition)) {
          return 0;
        }
        return (_ref = aPosition > bPosition) != null ? _ref : {
          1: -1
        };
      });
    };

    View.prototype._findPrevItem = function(position) {
      var eItem, el, elPosition, item, items, _i, _len;
      item = void 0;
      items = this._getItems().reverse();
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        eItem = items[_i];
        el = $(eItem);
        elPosition = Number(el.attr('data-view-position'));
        if (elPosition <= position) {
          item = {
            el: el,
            distance: position - elPosition
          };
          break;
        }
      }
      return item;
    };

    View.prototype._findNextItem = function(position) {
      var eItem, el, elPosition, item, items, _i, _len;
      item = void 0;
      items = this._getItems();
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        eItem = items[_i];
        el = $(eItem);
        elPosition = Number(el.attr('data-view-position'));
        if (elPosition >= position) {
          item = {
            el: el,
            distance: elPosition - position
          };
          break;
        }
      }
      return item;
    };

    View.prototype.clear = function() {
      return this.location.html('');
    };

    View.prototype.build = function(data, options) {
      var dataKey, templateGeneration, _base, _base1, _base2;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      dataKey = this._dataKey(data);
      templateGeneration = new this.handlebars.SafeString(this.template(data)).string;
      if (this.options.keys) {
        options.container || (options.container = {});
        (_base = options.container).classes || (_base.classes = '');
        (_base1 = options.container).extras || (_base1.extras = '');
        (_base2 = options.container).el || (_base2.el = 'div');
        options.position || (options.position = '');
        templateGeneration = "<" + options.container.el + " class=\"handlebars-view " + options.container.classes + "\" data-view-key=\"" + dataKey + "\" data-view-position=\"" + options.position + "\" " + options.container.extras + "> " + templateGeneration + " </" + options.container.el + ">";
      }
      return {
        key: dataKey,
        template: templateGeneration
      };
    };

    View.prototype.render = function(data, options) {
      var built;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      built = this.build(data, options);
      this.location.html(built.template);
      return true;
    };

    View.prototype.append = function(data, options) {
      var built, nextItem, prevItem;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      if ((options.position != null) && isNaN(options.position)) {
        throw 'position must be a number';
      }
      built = this.build(data, options);
      if (this.location.find("[data-view-key=\"" + built.key + "\"]").length === 0) {
        if (options.position != null) {
          options.position = Number(options.position);
          prevItem = this._findPrevItem(options.position);
          nextItem = this._findNextItem(options.position);
          if (nextItem && (!prevItem || nextItem.distance < prevItem.distance)) {
            nextItem.el.before(built.template);
          } else if (prevItem) {
            prevItem.el.after(built.template);
          } else {
            this.location.append(built.template);
          }
        } else {
          this.location.append(built.template);
        }
      }
      return true;
    };

    return View;

  })();

  window.View || (window.View = View);

}).call(this);
//# sourceMappingURL=handlebarsView.min.js.map